
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.SQLException;

public class MalzemeJDialog extends javax.swing.JDialog {

    private TarifJFrame tarifJFrame; // tarifJFrame referansı

    public MalzemeJDialog(java.awt.Frame parent, boolean modal, TarifJFrame tarifFrame) {
        super(parent, modal);
        this.tarifJFrame = tarifFrame; // tarifJFrame referansını alıyoruz
        initComponents();
        loadMalzemeler();  // Malzemeleri yükleyip ComboBox'a ekle
        loadMalzemeTable();
        loadMalzemeBirim();
    }

    // ComboBox'a malzemeleri ekler
    private void loadMalzemeler() {
        ResultSet rs = DbHelper.getMalzemeler();
        try {
            malzeme_comboBox.removeAllItems();  // ComboBox'ı temizle
            while (rs.next()) {
                malzeme_comboBox.addItem(rs.getString("MalzemeAdi"));  // Malzemeleri ekle
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // ResultSet, Statement ve Connection nesnelerini kapatma
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // ComboBox'a malzemeleri ekler
    private void loadMalzemeBirim() {
        try {
            ResultSet rs = DbHelper.getMalzemeBirim();
            birim_comboBox.removeAllItems();  // ComboBox'ı temizle
            while (rs.next()) {
                birim_comboBox.addItem(rs.getString("MalzemeBirim"));  // Birimleri ekle
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Malzemeler tablosunu veri ile doldurur
    private void loadMalzemeTable() {
        try {
            ResultSet rs = DbHelper.getAllMalzemeler();
            DefaultTableModel model = (DefaultTableModel) malzemeTable.getModel();
            model.setRowCount(0);  // Tabloyu sıfırla

            while (rs.next()) {
                int malzemeID = rs.getInt("MalzemeID");
                String malzemeAdi = rs.getString("MalzemeAdi");
                String toplamMiktar = rs.getString("ToplamMiktar");
                String malzemeBirim = rs.getString("MalzemeBirim");
                double birimFiyat = rs.getDouble("BirimFiyat");

                model.addRow(new Object[]{malzemeID, malzemeAdi, toplamMiktar, malzemeBirim, birimFiyat});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        malzeme_comboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_malzememiktar = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buton_malzemeEkle = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        malzemeEkleTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        malzemeTable = new javax.swing.JTable();
        buton_yeniMalzeme = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        buton_tamamla = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txt_malzeme = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txt_toplammiktar = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txt_birimfiyat = new javax.swing.JTextPane();
        buton_malzemeCikar = new javax.swing.JButton();
        birim_comboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        malzeme_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(malzeme_comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 120, -1));

        jLabel1.setForeground(new java.awt.Color(245, 245, 220));
        jLabel1.setText("Malzeme Adı");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, -1, -1));

        jScrollPane1.setViewportView(txt_malzememiktar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 52, -1));

        jLabel2.setForeground(new java.awt.Color(245, 245, 220));
        jLabel2.setText("Malzeme Miktarı");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, -1, -1));

        jLabel3.setForeground(new java.awt.Color(245, 245, 220));
        jLabel3.setText("(kilo, litre, adet, demet)");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 380, -1, 22));

        buton_malzemeEkle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buton_malzemeEkle.setText("Malzemeyi Tarife Ekle");
        buton_malzemeEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_malzemeEkleActionPerformed(evt);
            }
        });
        getContentPane().add(buton_malzemeEkle, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, 169, -1));

        malzemeEkleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Malzeme Adı", "Malzeme Miktarı"
            }
        ));
        jScrollPane2.setViewportView(malzemeEkleTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 245, 120));

        malzemeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Malzeme ID", "Malzeme Adı", "Toplam Miktar", "Birimi Türü", "Birim Fiyatı"
            }
        ));
        malzemeTable.setShowGrid(true);
        jScrollPane3.setViewportView(malzemeTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 414, 223));

        buton_yeniMalzeme.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buton_yeniMalzeme.setText("Yeni Malzeme Ekle");
        buton_yeniMalzeme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_yeniMalzemeActionPerformed(evt);
            }
        });
        getContentPane().add(buton_yeniMalzeme, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, 150, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(245, 245, 220));
        jLabel4.setText("YENİ MALZEME EKLE");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, -1, -1));

        buton_tamamla.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buton_tamamla.setText("Tarif Eklemeyi/Güncellemeyi Tamamla");
        buton_tamamla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_tamamlaActionPerformed(evt);
            }
        });
        getContentPane().add(buton_tamamla, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 460, -1, -1));

        jLabel5.setForeground(new java.awt.Color(245, 245, 220));
        jLabel5.setText("Malzeme Adı");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, -1, -1));

        jLabel6.setForeground(new java.awt.Color(245, 245, 220));
        jLabel6.setText("Toplam Miktar");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 110, -1, -1));

        jScrollPane5.setViewportView(txt_malzeme);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 70, -1));

        jScrollPane4.setViewportView(txt_toplammiktar);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 78, -1));

        jLabel7.setForeground(new java.awt.Color(245, 245, 220));
        jLabel7.setText("Birim Türü");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        jLabel8.setForeground(new java.awt.Color(245, 245, 220));
        jLabel8.setText("Birim Fiyatı");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        jScrollPane7.setViewportView(txt_birimfiyat);

        getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 180, 59, -1));

        buton_malzemeCikar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        buton_malzemeCikar.setText("Malzemeyi Tariften Çıkar");
        buton_malzemeCikar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buton_malzemeCikarActionPerformed(evt);
            }
        });
        getContentPane().add(buton_malzemeCikar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, -1, -1));

        birim_comboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        getContentPane().add(birim_comboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 43, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(245, 245, 220));
        jLabel11.setText("TARİFE MALZEME EKLE");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, -1, -1));

        jLabel12.setForeground(new java.awt.Color(245, 245, 220));
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/JDialog.png"))); // NOI18N
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buton_malzemeEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_malzemeEkleActionPerformed
        // Seçilen malzeme adı ve miktarı al
        String malzemeAdi = (String) malzeme_comboBox.getSelectedItem();
        String malzemeMiktarStr = txt_malzememiktar.getText();

        // Eğer miktar boşsa uyarı göster
        if (malzemeAdi.isEmpty() || malzemeMiktarStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen bir malzeme ve miktar girin!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Malzeme miktarını kontrol et
            double malzemeMiktar = Double.parseDouble(malzemeMiktarStr);

            //Negatif değer kontrolü
            if (malzemeMiktar <= 0) {
                throw new NumberFormatException();
            }

            // Malzemenin tabloya daha önce eklenip eklenmediğini kontrol et
            DefaultTableModel model = (DefaultTableModel) malzemeEkleTable.getModel();
            boolean malzemeVar = false;

            for (int i = 0; i < model.getRowCount(); i++) {
                String mevcutMalzemeAdi = (String) model.getValueAt(i, 0);
                if (mevcutMalzemeAdi.equals(malzemeAdi)) {
                    malzemeVar = true;
                    break;
                }
            }

            // Eğer malzeme zaten eklenmişse uyarı göster
            if (malzemeVar) {
                JOptionPane.showMessageDialog(this, "Bu malzeme zaten tarifte mevcut!", "Hata", JOptionPane.ERROR_MESSAGE);
            } else {
                // Malzeme ve miktarı tabloya ekle
                model.addRow(new Object[]{malzemeAdi, malzemeMiktarStr});

                // Text alanını temizle
                txt_malzememiktar.setText("");
            }

        } catch (NumberFormatException e) {
            // Eğer geçersiz bir sayı ya da negatif bir sayı girildiyse uyarı göster
            JOptionPane.showMessageDialog(this, "Geçerli sayı değerleri girilmemiştir. Malzeme tarife eklenemedi.", "Hata", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_buton_malzemeEkleActionPerformed

    private void buton_tamamlaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_tamamlaActionPerformed
        // Tarif bilgilerini 'tarifJFrame' üzerinden alalım
        String tarifAdi = tarifJFrame.getTarifAdi();
        String kategoriAdi = tarifJFrame.getKategori();
        String sureStr = tarifJFrame.getSure();
        String talimatlar = tarifJFrame.getTalimatlar();

        // Kategori adını kullanarak kategori ID'sini al
        int kategoriID = DbHelper.getKategoriIDByAdi(kategoriAdi);
        if (kategoriID == -1) {
            JOptionPane.showMessageDialog(this, "Kategori bulunamadı.", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Tarif süresi kontrolü
        int sure;
        try {
            sure = Integer.parseInt(sureStr);
            if (sure <= 0) {
                JOptionPane.showMessageDialog(this, "Geçerli tarif süresi girilmemiştir.", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Geçerli tarif süresi girilmemiştir.", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!DbHelper.isTarifAdiMevcut(tarifAdi)) {
            // Tarifi veri tabanına ekle ve tarifID'sini al
            int tarifID = DbHelper.insertTarif(tarifAdi, kategoriID, sure, talimatlar);
            if (tarifID == -1) {
                JOptionPane.showMessageDialog(this, "Tarif eklenemedi.", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Malzemeleri al ve tarif-malzeme ilişkisini veri tabanına ekle
            DefaultTableModel model = (DefaultTableModel) malzemeEkleTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                String malzemeAdi = (String) model.getValueAt(i, 0);
                double malzemeMiktar = Double.parseDouble((String) model.getValueAt(i, 1));

                // Malzeme ID'sini bulmak için MalzemeAdı'ndan MalzemeID'yi alalım
                int malzemeID = DbHelper.getMalzemeIDByAdi(malzemeAdi);
                if (malzemeID != -1) {
                    DbHelper.insertTarifMalzeme(tarifID, malzemeID, malzemeMiktar);
                }
            }

            // Başarı mesajı
            JOptionPane.showMessageDialog(this, "Tarif ve malzemeler başarıyla eklendi.", "Başarılı", JOptionPane.INFORMATION_MESSAGE);
            dispose();  // Pencereyi kapat
            tarifJFrame.loadTarifler();
        } else {
            // Tarifi veri tabanında güncelle ve tarifID'sini al
            int tarifID = DbHelper.updateTarif(tarifAdi, kategoriID, sure, talimatlar);
            if (tarifID == -1) {
                JOptionPane.showMessageDialog(this, "Tarif güncellenemedi.", "Hata", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Eski malzemeleri veri tabanından kaldır
            DbHelper.deleteTarifMalzemeByTarifID(tarifID);

            // Malzemeleri al ve tarif-malzeme ilişkisini veri tabanına ekle
            DefaultTableModel model = (DefaultTableModel) malzemeEkleTable.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                String malzemeAdi = (String) model.getValueAt(i, 0);
                double malzemeMiktar = Double.parseDouble((String) model.getValueAt(i, 1));

                // Malzeme ID'sini bulmak için MalzemeAdı'ndan MalzemeID'yi alalım
                int malzemeID = DbHelper.getMalzemeIDByAdi(malzemeAdi);
                if (malzemeID != -1) {
                    DbHelper.insertTarifMalzeme(tarifID, malzemeID, malzemeMiktar);
                }
            }

            // Başarı mesajı
            JOptionPane.showMessageDialog(this, "Tarif ve malzemeler başarıyla güncellendi.", "Başarılı", JOptionPane.INFORMATION_MESSAGE);
            dispose();  // Pencereyi kapat
            tarifJFrame.loadTarifler();
        }
    }//GEN-LAST:event_buton_tamamlaActionPerformed

    private void buton_malzemeCikarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_malzemeCikarActionPerformed
        // Tablo üzerinde seçili olan satırı al
        int selectedRow = malzemeEkleTable.getSelectedRow();

        // Eğer bir satır seçili değilse uyarı göster
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Lütfen çıkarmak istediğiniz malzemeyi seçin!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Seçili satırı tablodan çıkar
        DefaultTableModel model = (DefaultTableModel) malzemeEkleTable.getModel();
        model.removeRow(selectedRow);

        JOptionPane.showMessageDialog(this, "Malzeme tariften çıkarıldı.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_buton_malzemeCikarActionPerformed

    private void buton_yeniMalzemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buton_yeniMalzemeActionPerformed
        // Text alanlarından bilgileri al
        String malzemeAdi = txt_malzeme.getText();
        String toplamMiktarStr = txt_toplammiktar.getText();
        String malzemeBirim = (String) birim_comboBox.getSelectedItem();
        String birimFiyatStr = txt_birimfiyat.getText();

        // Eğer bir alan boşsa uyarı göster
        if (malzemeAdi.isEmpty() || toplamMiktarStr.isEmpty() || malzemeBirim.isEmpty() || birimFiyatStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lütfen tüm alanları doldurun!", "Hata", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Toplam miktar ve birim fiyatını kontrol et
            double toplamMiktar = Double.parseDouble(toplamMiktarStr);
            double birimFiyat = Double.parseDouble(birimFiyatStr);

            // Negatif değer kontrolü
            if (toplamMiktar <= 0 || birimFiyat <= 0) {
                throw new NumberFormatException();
            }

            // Yeni malzemeyi veri tabanına ekle
            DbHelper.insertMalzeme(malzemeAdi, toplamMiktarStr, malzemeBirim, birimFiyat);

            // Başarılı mesajı göster
            JOptionPane.showMessageDialog(this, "Malzeme başarıyla eklendi.", "Başarılı", JOptionPane.INFORMATION_MESSAGE);

            // Text alanlarını temizle
            txt_malzeme.setText("");
            txt_toplammiktar.setText("");
            txt_birimfiyat.setText("");

            // Malzemeler tablosunu ve ComboBox'ı güncelle
            loadMalzemeTable();  // Tabloda güncellenmiş malzemeyi göster
            loadMalzemeler();    // ComboBox'ı yeniden yükle

        } catch (NumberFormatException e) {
            // Eğer geçersiz bir sayı ya da negatif bir sayı girildiyse uyarı göster
            JOptionPane.showMessageDialog(this, "Geçerli sayı değerleri girilmemiştir. Malzeme veri tabanına eklenemedi.", "Hata", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buton_yeniMalzemeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MalzemeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MalzemeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MalzemeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MalzemeJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TarifJFrame tarifFrame = new TarifJFrame();
                MalzemeJDialog dialog = new MalzemeJDialog(tarifFrame, true, tarifFrame);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> birim_comboBox;
    private javax.swing.JButton buton_malzemeCikar;
    private javax.swing.JButton buton_malzemeEkle;
    private javax.swing.JButton buton_tamamla;
    private javax.swing.JButton buton_yeniMalzeme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable malzemeEkleTable;
    private javax.swing.JTable malzemeTable;
    private javax.swing.JComboBox<String> malzeme_comboBox;
    private javax.swing.JTextPane txt_birimfiyat;
    private javax.swing.JTextPane txt_malzeme;
    private javax.swing.JTextPane txt_malzememiktar;
    private javax.swing.JTextPane txt_toplammiktar;
    // End of variables declaration//GEN-END:variables
}
